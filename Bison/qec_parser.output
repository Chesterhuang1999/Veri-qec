Terminals which are not used

   TO
   MEAS
   FOR
   OR
   AND


State 27 conflicts: 1 shift/reduce


Grammar

    0 $accept: triple $end

    1 triple: bexpr ',' program ',' bexpr

    2 program: statements

    3 statements: statement
    4           | statements ';' statement

    5 statement: IF bexpr THEN program ELSE program
    6          | WHILE bexpr DO program
    7          | SKIP

    8 bexpr: bterm
    9      | bterm BITAND bexpr
   10      | bterm BITOR bexpr

   11 bterm: /* empty */
   12      | TRUE
   13      | FALSE
   14      | aexpr LEQ aexpr
   15      | aexpr GEQ aexpr
   16      | aexpr EQ aexpr
   17      | aexpr NEQ aexpr
   18      | aexpr

   19 aexpr: aterm
   20      | aterm '+' aexpr
   21      | aterm '-' aexpr

   22 aterm: afactor
   23      | afactor '*' aterm
   24      | afactor '/' aterm

   25 afactor: NUMBER
   26        | NAME


Terminals, with rules where they appear

$end (0) 0
'*' (42) 23
'+' (43) 20
',' (44) 1
'-' (45) 21
'/' (47) 24
';' (59) 4
error (256)
IF (258) 5
THEN (259) 5
ELSE (260) 5
WHILE (261) 6
DO (262) 6
SKIP (263) 7
TO (264)
MEAS (265)
FOR (266)
TRUE (267) 12
FALSE (268) 13
NAME (269) 26
NUMBER (270) 25
OR (271)
AND (272)
EQ (273) 16
NEQ (274) 17
GEQ (275) 15
LEQ (276) 14
BITAND (277) 9
BITOR (278) 10


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
triple (31)
    on left: 1, on right: 0
program (32)
    on left: 2, on right: 1 5 6
statements (33)
    on left: 3 4, on right: 2 4
statement (34)
    on left: 5 6 7, on right: 3 4
bexpr (35)
    on left: 8 9 10, on right: 1 5 6 9 10
bterm (36)
    on left: 11 12 13 14 15 16 17 18, on right: 8 9 10
aexpr (37)
    on left: 19 20 21, on right: 14 15 16 17 18 20 21
aterm (38)
    on left: 22 23 24, on right: 19 20 21 23 24
afactor (39)
    on left: 25 26, on right: 22 23 24


state 0

    0 $accept: . triple $end

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    triple   go to state 5
    bexpr    go to state 6
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 1

   12 bterm: TRUE .

    $default  reduce using rule 12 (bterm)


state 2

   13 bterm: FALSE .

    $default  reduce using rule 13 (bterm)


state 3

   26 afactor: NAME .

    $default  reduce using rule 26 (afactor)


state 4

   25 afactor: NUMBER .

    $default  reduce using rule 25 (afactor)


state 5

    0 $accept: triple . $end

    $end  shift, and go to state 11


state 6

    1 triple: bexpr . ',' program ',' bexpr

    ','  shift, and go to state 12


state 7

    8 bexpr: bterm .
    9      | bterm . BITAND bexpr
   10      | bterm . BITOR bexpr

    BITAND  shift, and go to state 13
    BITOR   shift, and go to state 14

    $default  reduce using rule 8 (bexpr)


state 8

   14 bterm: aexpr . LEQ aexpr
   15      | aexpr . GEQ aexpr
   16      | aexpr . EQ aexpr
   17      | aexpr . NEQ aexpr
   18      | aexpr .

    EQ   shift, and go to state 15
    NEQ  shift, and go to state 16
    GEQ  shift, and go to state 17
    LEQ  shift, and go to state 18

    $default  reduce using rule 18 (bterm)


state 9

   19 aexpr: aterm .
   20      | aterm . '+' aexpr
   21      | aterm . '-' aexpr

    '+'  shift, and go to state 19
    '-'  shift, and go to state 20

    $default  reduce using rule 19 (aexpr)


state 10

   22 aterm: afactor .
   23      | afactor . '*' aterm
   24      | afactor . '/' aterm

    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 22 (aterm)


state 11

    0 $accept: triple $end .

    $default  accept


state 12

    1 triple: bexpr ',' . program ',' bexpr

    IF     shift, and go to state 23
    WHILE  shift, and go to state 24
    SKIP   shift, and go to state 25

    program     go to state 26
    statements  go to state 27
    statement   go to state 28


state 13

    9 bexpr: bterm BITAND . bexpr

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    bexpr    go to state 29
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 14

   10 bexpr: bterm BITOR . bexpr

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    bexpr    go to state 30
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 15

   16 bterm: aexpr EQ . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 31
    aterm    go to state 9
    afactor  go to state 10


state 16

   17 bterm: aexpr NEQ . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 32
    aterm    go to state 9
    afactor  go to state 10


state 17

   15 bterm: aexpr GEQ . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 33
    aterm    go to state 9
    afactor  go to state 10


state 18

   14 bterm: aexpr LEQ . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 34
    aterm    go to state 9
    afactor  go to state 10


state 19

   20 aexpr: aterm '+' . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 35
    aterm    go to state 9
    afactor  go to state 10


state 20

   21 aexpr: aterm '-' . aexpr

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aexpr    go to state 36
    aterm    go to state 9
    afactor  go to state 10


state 21

   23 aterm: afactor '*' . aterm

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aterm    go to state 37
    afactor  go to state 10


state 22

   24 aterm: afactor '/' . aterm

    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    aterm    go to state 38
    afactor  go to state 10


state 23

    5 statement: IF . bexpr THEN program ELSE program

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    bexpr    go to state 39
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 24

    6 statement: WHILE . bexpr DO program

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    bexpr    go to state 40
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 25

    7 statement: SKIP .

    $default  reduce using rule 7 (statement)


state 26

    1 triple: bexpr ',' program . ',' bexpr

    ','  shift, and go to state 41


state 27

    2 program: statements .
    4 statements: statements . ';' statement

    ';'  shift, and go to state 42

    ';'       [reduce using rule 2 (program)]
    $default  reduce using rule 2 (program)


state 28

    3 statements: statement .

    $default  reduce using rule 3 (statements)


state 29

    9 bexpr: bterm BITAND bexpr .

    $default  reduce using rule 9 (bexpr)


state 30

   10 bexpr: bterm BITOR bexpr .

    $default  reduce using rule 10 (bexpr)


state 31

   16 bterm: aexpr EQ aexpr .

    $default  reduce using rule 16 (bterm)


state 32

   17 bterm: aexpr NEQ aexpr .

    $default  reduce using rule 17 (bterm)


state 33

   15 bterm: aexpr GEQ aexpr .

    $default  reduce using rule 15 (bterm)


state 34

   14 bterm: aexpr LEQ aexpr .

    $default  reduce using rule 14 (bterm)


state 35

   20 aexpr: aterm '+' aexpr .

    $default  reduce using rule 20 (aexpr)


state 36

   21 aexpr: aterm '-' aexpr .

    $default  reduce using rule 21 (aexpr)


state 37

   23 aterm: afactor '*' aterm .

    $default  reduce using rule 23 (aterm)


state 38

   24 aterm: afactor '/' aterm .

    $default  reduce using rule 24 (aterm)


state 39

    5 statement: IF bexpr . THEN program ELSE program

    THEN  shift, and go to state 43


state 40

    6 statement: WHILE bexpr . DO program

    DO  shift, and go to state 44


state 41

    1 triple: bexpr ',' program ',' . bexpr

    TRUE    shift, and go to state 1
    FALSE   shift, and go to state 2
    NAME    shift, and go to state 3
    NUMBER  shift, and go to state 4

    $default  reduce using rule 11 (bterm)

    bexpr    go to state 45
    bterm    go to state 7
    aexpr    go to state 8
    aterm    go to state 9
    afactor  go to state 10


state 42

    4 statements: statements ';' . statement

    IF     shift, and go to state 23
    WHILE  shift, and go to state 24
    SKIP   shift, and go to state 25

    statement  go to state 46


state 43

    5 statement: IF bexpr THEN . program ELSE program

    IF     shift, and go to state 23
    WHILE  shift, and go to state 24
    SKIP   shift, and go to state 25

    program     go to state 47
    statements  go to state 27
    statement   go to state 28


state 44

    6 statement: WHILE bexpr DO . program

    IF     shift, and go to state 23
    WHILE  shift, and go to state 24
    SKIP   shift, and go to state 25

    program     go to state 48
    statements  go to state 27
    statement   go to state 28


state 45

    1 triple: bexpr ',' program ',' bexpr .

    $default  reduce using rule 1 (triple)


state 46

    4 statements: statements ';' statement .

    $default  reduce using rule 4 (statements)


state 47

    5 statement: IF bexpr THEN program . ELSE program

    ELSE  shift, and go to state 49


state 48

    6 statement: WHILE bexpr DO program .

    $default  reduce using rule 6 (statement)


state 49

    5 statement: IF bexpr THEN program ELSE . program

    IF     shift, and go to state 23
    WHILE  shift, and go to state 24
    SKIP   shift, and go to state 25

    program     go to state 50
    statements  go to state 27
    statement   go to state 28


state 50

    5 statement: IF bexpr THEN program ELSE program .

    $default  reduce using rule 5 (statement)
